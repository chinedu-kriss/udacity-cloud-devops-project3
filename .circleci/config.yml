version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert_migration:
      description: Revert the last migration if successfully run in the current workflow.
      parameters:
        workflow_id:
          type: string
      steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
              SUCCESS=$(curl --insecure  https://kvdb.io/GNJAZUVgCp9p9BG2tyxbpL/migration_${CIRCLE_WORKFLOW_ID:0:7})
              if (($SUCCESS == 1))
              then
                cd ~/project/backend
                npm install
                npm run build
                npm run migrations:revert
              fi

jobs:

  build-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Build front-end
            command: |
              cd frontend
              npm install
              npm run build
        - save_cache:
            paths: [frontend/node_modules]
            key: frontend-build
                
  build-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Back-end build
            command: |
              cd backend
              npm install
              npm run build
        - save_cache:
            paths: [backend/node_modules]
            key: backend-build

  test-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run: 
            name: test frontend
            command: |
              cd frontend
              npm install
              npm run test
        - save_cache:
            paths: [frontend/node_modules]
            key: frontend-build      
                
  test-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run: 
            name: test backend
            command: |
              cd backend
              npm install
              npm run test
        - save_cache:
            paths: [backend/node_modules]
            key: backend-build        

  scan-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: scan frontend
            command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical
        - save_cache:
            paths: [frontend/node_modules]
            key: frontend-build         

  scan-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: scan backend
            command: |
              cd backend
              npm install
              npm audit fix --force
              npm audit fix --force 
              npm audit --audit-level=critical
        - save_cache:
            paths: [backend/node_modules]
            key: backend-build       
                                               
  deploy-infrastructure:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run: yum install -y tar gzip
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=Udapeople \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"   
              
        - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=Udapeople \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
        
        - run:
            name: Add back-end ip to ansible inventory
            command: |
              aws ec2 describe-instances \
              --filter "Name=instance-state-name,Values=running" \
              --query "Reservations[*].Instances[*].[PublicIpAddress]" \
              --output text >> ~/project/.circleci/ansible/inventory.txt
              cat ~/project/.circleci/ansible/inventory.txt

        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt

        - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
  
  configure-infrastructure:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
                fingerprints: ["d8:b1:55:45:ac:df:7a:db:d0:c0:20:21:f1:84:ed:5c"] 
        - attach_workspace:
              at: ~/
        - run:
            name: Install dependencies
            command: |
              apk add --update ansible
              apk add --update openssh
              apk add --update tar
              apk add --update gzip
              pip3 install awscli
        - run:
            name: Configure server
            command: |
              cd .circleci/ansible
              ansible-playbook -i inventory.txt configure-server.yml
        - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  run-migrations:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - run:
            name: Run migrations
            command: |
              cd backend
              npm install
              npm run migrations > migrations_dump.txt
              cat migrations_dump.txt
        - run:
            name: Send migration status to kvdb.io
            command: |   
                if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                then
                    curl https://kvdb.io/GNJAZUVgCp9p9BG2tyxbpL/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                fi
        - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}          
    
workflows:
  my workflow:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]

          